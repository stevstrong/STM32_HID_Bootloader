ARM GAS  x:\temp2\ccNwGiAj.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB128:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /*******************************************************************************
   3:Src/main.c    **** 	*
   4:Src/main.c    **** 	* HID bootloader for STM32F407 MCU
   5:Src/main.c    **** 	*
   6:Src/main.c    **** 	******************************************************************************
   7:Src/main.c    **** 	*
   8:Src/main.c    **** 	*	Created by: Vassilis Serasidis
   9:Src/main.c    **** 	*       Date: 2018
  10:Src/main.c    **** 	*       Home: http://www.serasidis.gr
  11:Src/main.c    **** 	*      email: avrsite@yahoo.gr, info@serasidis.gr
  12:Src/main.c    **** 	*
  13:Src/main.c    **** 	******************************************************************************
  14:Src/main.c    **** 
  15:Src/main.c    **** 
  16:Src/main.c    **** 
  17:Src/main.c    **** 
  18:Src/main.c    **** 
  19:Src/main.c    **** 
  20:Src/main.c    **** 
  21:Src/main.c    ****   ******************************************************************************
  22:Src/main.c    ****   * @file           : main.c
  23:Src/main.c    ****   * @brief          : Main program body
  24:Src/main.c    ****   ******************************************************************************
  25:Src/main.c    ****   * This notice applies to any and all portions of this file
  26:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
  27:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  28:Src/main.c    ****   * inserted by the user or by software development tools
  29:Src/main.c    ****   * are owned by their respective copyright owners.
  30:Src/main.c    ****   *
  31:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  32:Src/main.c    ****   * All rights reserved.
ARM GAS  x:\temp2\ccNwGiAj.s 			page 2


  33:Src/main.c    ****   *
  34:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  35:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  36:Src/main.c    ****   *
  37:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  38:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  39:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  40:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  41:Src/main.c    ****   *    and/or other materials provided with the distribution.
  42:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  43:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  44:Src/main.c    ****   *    derived from this software without specific written permission.
  45:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  46:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  47:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  48:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  49:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  50:Src/main.c    ****   *    this license. 
  51:Src/main.c    ****   *
  52:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  53:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  54:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  55:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  56:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  57:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  58:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  59:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  60:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  61:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  62:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  63:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  64:Src/main.c    ****   *
  65:Src/main.c    ****   ******************************************************************************
  66:Src/main.c    ****   */
  67:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  68:Src/main.c    **** #include "main.h"
  69:Src/main.c    **** #include "stm32f4xx_hal.h"
  70:Src/main.c    **** #include "usb_device.h"
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE BEGIN Includes */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE END Includes	*/
  75:Src/main.c    **** 
  76:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE BEGIN PV */
  79:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  80:Src/main.c    **** 
  81:Src/main.c    **** uint8_t USB_RX_Buffer[HID_RX_SIZE];
  82:Src/main.c    **** uint8_t USB_TX_Buffer[8]; //USB data -> PC
  83:Src/main.c    **** static uint8_t CMD_SIGNATURE[7] = {'B','T','L','D','C','M','D'};
  84:Src/main.c    **** static uint8_t CMD_DATA_RECEIVED[8] = {'B','T','L','D','C','M','D',2}; //Command: <Send next data p
  85:Src/main.c    **** uint8_t new_data_is_received = 0;
  86:Src/main.c    **** static uint8_t pageData[SECTOR_SIZE];
  87:Src/main.c    **** typedef void (*funct_ptr)(void);
  88:Src/main.c    **** 
  89:Src/main.c    **** uint32_t magic_val;
ARM GAS  x:\temp2\ccNwGiAj.s 			page 3


  90:Src/main.c    **** uint16_t erase_page	= 1;
  91:Src/main.c    **** 
  92:Src/main.c    **** /* USER CODE END PV */
  93:Src/main.c    **** 
  94:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  95:Src/main.c    **** void SystemClock_Config(void);
  96:Src/main.c    **** static void MX_GPIO_Init(void);
  97:Src/main.c    **** 
  98:Src/main.c    **** void write_flash_sector(uint32_t currentPage);
  99:Src/main.c    **** extern uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
 100:Src/main.c    **** 
 101:Src/main.c    **** /* USER CODE BEGIN PFP */
 102:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 103:Src/main.c    **** 
 104:Src/main.c    **** /* USER CODE END PFP */
 105:Src/main.c    **** 
 106:Src/main.c    **** /* USER CODE BEGIN 0 */
 107:Src/main.c    **** 
 108:Src/main.c    **** /* USER CODE END 0 */
 109:Src/main.c    **** 
 110:Src/main.c    **** /**
 111:Src/main.c    ****   * @brief  The application entry point.
 112:Src/main.c    ****   *
 113:Src/main.c    ****   * @retval None
 114:Src/main.c    ****   */
 115:Src/main.c    **** int main(void)
 116:Src/main.c    **** {
 117:Src/main.c    ****   /* USER CODE BEGIN 1 */
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE END 1 */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 124:Src/main.c    ****   HAL_Init();
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN Init */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END Init */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Configure the system clock */
 131:Src/main.c    ****   SystemClock_Config();
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 136:Src/main.c    **** 	MX_GPIO_Init();
 137:Src/main.c    **** 	
 138:Src/main.c    **** 	__HAL_RCC_PWR_CLK_ENABLE();
 139:Src/main.c    **** 	HAL_PWR_EnableBkUpAccess();
 140:Src/main.c    **** 	__BKPSRAM_CLK_ENABLE();
 141:Src/main.c    **** 	magic_val = *(__IO uint32_t *)(BKPSRAM_BASE); // Read the magic number 0x0x424C an Backup SRAM add
 142:Src/main.c    **** 	
 143:Src/main.c    **** 	/* In case of incoming magic number or <BOOT_1_PIN> is LOW, jump to HID bootloader */
 144:Src/main.c    **** 	if((magic_val != 0x424C)&&(HAL_GPIO_ReadPin(BOOT_1_PORT, BOOT_1_PIN))){			
 145:Src/main.c    **** 			
 146:Src/main.c    **** 		typedef void (*pFunction)(void);
ARM GAS  x:\temp2\ccNwGiAj.s 			page 4


 147:Src/main.c    **** 		pFunction Jump_To_Application;
 148:Src/main.c    **** 		uint32_t JumpAddress;
 149:Src/main.c    **** 		
 150:Src/main.c    **** 		JumpAddress = *(__IO uint32_t*) (FLASH_BASE + USER_CODE_OFFSET + 4);
 151:Src/main.c    **** 		Jump_To_Application = (pFunction) JumpAddress;
 152:Src/main.c    **** 		__set_MSP(*(uint32_t *)(FLASH_BASE + USER_CODE_OFFSET));
 153:Src/main.c    **** 		Jump_To_Application(); 
 154:Src/main.c    **** 	}
 155:Src/main.c    **** 	
 156:Src/main.c    **** 	*(__IO uint32_t *)(BKPSRAM_BASE) = 0; //Reset the magic number backup memory
 157:Src/main.c    **** 	
 158:Src/main.c    ****   /* USER CODE END SysInit */
 159:Src/main.c    **** 	
 160:Src/main.c    ****   /* Initialize all configured peripherals */
 161:Src/main.c    **** 	
 162:Src/main.c    ****   MX_USB_DEVICE_Init();
 163:Src/main.c    **** 
 164:Src/main.c    ****   /* USER CODE BEGIN 2 */
 165:Src/main.c    **** 	static volatile uint32_t current_Page		= (USER_CODE_OFFSET / 1024);
 166:Src/main.c    **** 	static volatile uint16_t currentPageOffset	= 0;
 167:Src/main.c    **** 	
 168:Src/main.c    ****   /* USER CODE END 2 */
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* Infinite loop */
 171:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 172:Src/main.c    ****   while (1)
 173:Src/main.c    ****   {
 174:Src/main.c    **** 		if(new_data_is_received == 1){
 175:Src/main.c    **** 			new_data_is_received = 0;
 176:Src/main.c    **** 			if(memcmp(USB_RX_Buffer, CMD_SIGNATURE, sizeof(CMD_SIGNATURE)) == 0) {
 177:Src/main.c    **** 				
 178:Src/main.c    **** 				switch(USB_RX_Buffer[7]){
 179:Src/main.c    **** 					case 0x00:	//------------ Reset pages
 180:Src/main.c    **** 						current_Page = 16;
 181:Src/main.c    **** 						currentPageOffset = 0;
 182:Src/main.c    **** 						erase_page = 1;
 183:Src/main.c    **** 						//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_0);	
 184:Src/main.c    **** 					break;
 185:Src/main.c    **** 					
 186:Src/main.c    **** 					case 0x01: //------------- Reset MCU
 187:Src/main.c    **** 						if(currentPageOffset > 0){ //There are incoming data that are less than sector size (16384)
 188:Src/main.c    **** 							write_flash_sector(current_Page);
 189:Src/main.c    **** 						}
 190:Src/main.c    **** 						HAL_Delay(100);
 191:Src/main.c    **** 						HAL_NVIC_SystemReset();
 192:Src/main.c    **** 					break;
 193:Src/main.c    **** 				}				
 194:Src/main.c    **** 			}else{
 195:Src/main.c    **** 				memcpy(pageData + currentPageOffset,USB_RX_Buffer, HID_RX_SIZE);
 196:Src/main.c    **** 				currentPageOffset += HID_RX_SIZE;
 197:Src/main.c    **** 				
 198:Src/main.c    **** 				if(currentPageOffset == SECTOR_SIZE){
 199:Src/main.c    **** 					write_flash_sector(current_Page);
 200:Src/main.c    **** 					current_Page++;
 201:Src/main.c    **** 					currentPageOffset = 0;
 202:Src/main.c    **** 					CMD_DATA_RECEIVED[7] = 0x02;
 203:Src/main.c    **** 					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, CMD_DATA_RECEIVED, 8);
ARM GAS  x:\temp2\ccNwGiAj.s 			page 5


 204:Src/main.c    **** 				}
 205:Src/main.c    **** 			}
 206:Src/main.c    **** 		}
 207:Src/main.c    **** 	}
 208:Src/main.c    ****   /* USER CODE END WHILE */
 209:Src/main.c    **** 
 210:Src/main.c    ****   /* USER CODE BEGIN 3 */
 211:Src/main.c    **** 
 212:Src/main.c    ****   /* USER CODE END 3 */
 213:Src/main.c    **** 
 214:Src/main.c    **** }
 215:Src/main.c    **** 
 216:Src/main.c    **** /**
 217:Src/main.c    ****   * @brief System Clock Configuration
 218:Src/main.c    ****   * @retval None
 219:Src/main.c    ****   */
 220:Src/main.c    **** 
 221:Src/main.c    **** void SystemClock_Config(void) //168 MHz
 222:Src/main.c    **** {
 223:Src/main.c    **** 
 224:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 225:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 226:Src/main.c    **** 
 227:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 228:Src/main.c    ****     */
 229:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 230:Src/main.c    **** 
 231:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 232:Src/main.c    **** 
 233:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 234:Src/main.c    ****     */
 235:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 236:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 237:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 238:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 239:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM =  4;
 240:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN =168;
 241:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 242:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ =  7;
 243:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 244:Src/main.c    ****   {
 245:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 246:Src/main.c    ****   }
 247:Src/main.c    **** 
 248:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 249:Src/main.c    ****     */
 250:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 251:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 252:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 253:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 254:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 255:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 256:Src/main.c    **** 
 257:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 258:Src/main.c    ****   {
 259:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 260:Src/main.c    ****   }
ARM GAS  x:\temp2\ccNwGiAj.s 			page 6


 261:Src/main.c    **** 
 262:Src/main.c    ****     /**Configure the Systick interrupt time 
 263:Src/main.c    ****     */
 264:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 265:Src/main.c    **** 
 266:Src/main.c    ****     /**Configure the Systick 
 267:Src/main.c    ****     */
 268:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 271:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 272:Src/main.c    **** }
 273:Src/main.c    **** 
 274:Src/main.c    **** /** Configure pins as 
 275:Src/main.c    ****         * Analog 
 276:Src/main.c    ****         * Input 
 277:Src/main.c    ****         * Output
 278:Src/main.c    ****         * EVENT_OUT
 279:Src/main.c    ****         * EXTI
 280:Src/main.c    **** */
 281:Src/main.c    **** static void MX_GPIO_Init(void)
 282:Src/main.c    **** {
  27              		.loc 1 282 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 8AB0     		sub	sp, sp, #40
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
  39              	.LBB7:
 283:Src/main.c    **** 
 284:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 285:Src/main.c    **** 
 286:Src/main.c    ****   /* GPIO Ports Clock Enable */
 287:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  40              		.loc 1 287 0
  41 0004 0024     		movs	r4, #0
  42 0006 0094     		str	r4, [sp]
  43 0008 284B     		ldr	r3, .L3
  44 000a 1A6B     		ldr	r2, [r3, #48]
  45 000c 42F08002 		orr	r2, r2, #128
  46 0010 1A63     		str	r2, [r3, #48]
  47 0012 1A6B     		ldr	r2, [r3, #48]
  48 0014 02F08002 		and	r2, r2, #128
  49 0018 0092     		str	r2, [sp]
  50 001a 009A     		ldr	r2, [sp]
  51              	.LBE7:
  52              	.LBB8:
 288:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  53              		.loc 1 288 0
  54 001c 0194     		str	r4, [sp, #4]
  55 001e 1A6B     		ldr	r2, [r3, #48]
ARM GAS  x:\temp2\ccNwGiAj.s 			page 7


  56 0020 42F00102 		orr	r2, r2, #1
  57 0024 1A63     		str	r2, [r3, #48]
  58 0026 1A6B     		ldr	r2, [r3, #48]
  59 0028 02F00102 		and	r2, r2, #1
  60 002c 0192     		str	r2, [sp, #4]
  61 002e 019A     		ldr	r2, [sp, #4]
  62              	.LBE8:
  63              	.LBB9:
 289:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  64              		.loc 1 289 0
  65 0030 0294     		str	r4, [sp, #8]
  66 0032 1A6B     		ldr	r2, [r3, #48]
  67 0034 42F00202 		orr	r2, r2, #2
  68 0038 1A63     		str	r2, [r3, #48]
  69 003a 1A6B     		ldr	r2, [r3, #48]
  70 003c 02F00202 		and	r2, r2, #2
  71 0040 0292     		str	r2, [sp, #8]
  72 0042 029A     		ldr	r2, [sp, #8]
  73              	.LBE9:
  74              	.LBB10:
 290:Src/main.c    **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
  75              		.loc 1 290 0
  76 0044 0394     		str	r4, [sp, #12]
  77 0046 1A6B     		ldr	r2, [r3, #48]
  78 0048 42F00802 		orr	r2, r2, #8
  79 004c 1A63     		str	r2, [r3, #48]
  80 004e 1A6B     		ldr	r2, [r3, #48]
  81 0050 02F00802 		and	r2, r2, #8
  82 0054 0392     		str	r2, [sp, #12]
  83 0056 039A     		ldr	r2, [sp, #12]
  84              	.LBE10:
  85              	.LBB11:
 291:Src/main.c    **** 	__HAL_RCC_GPIOE_CLK_ENABLE();
  86              		.loc 1 291 0
  87 0058 0494     		str	r4, [sp, #16]
  88 005a 1A6B     		ldr	r2, [r3, #48]
  89 005c 42F01002 		orr	r2, r2, #16
  90 0060 1A63     		str	r2, [r3, #48]
  91 0062 1B6B     		ldr	r3, [r3, #48]
  92 0064 03F01003 		and	r3, r3, #16
  93 0068 0493     		str	r3, [sp, #16]
  94 006a 049B     		ldr	r3, [sp, #16]
  95              	.LBE11:
 292:Src/main.c    **** 
 293:Src/main.c    ****   /*Configure GPIO pin Output Level */
 294:Src/main.c    **** 
 295:Src/main.c    ****   /*Configure GPIO pin : PA12 */
 296:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_12;
  96              		.loc 1 296 0
  97 006c 4FF48053 		mov	r3, #4096
  98 0070 0593     		str	r3, [sp, #20]
 297:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  99              		.loc 1 297 0
 100 0072 1123     		movs	r3, #17
 101 0074 0693     		str	r3, [sp, #24]
 298:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 102              		.loc 1 298 0
ARM GAS  x:\temp2\ccNwGiAj.s 			page 8


 103 0076 0794     		str	r4, [sp, #28]
 299:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 104              		.loc 1 299 0
 105 0078 0894     		str	r4, [sp, #32]
 300:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 106              		.loc 1 300 0
 107 007a 05A9     		add	r1, sp, #20
 108 007c 0C48     		ldr	r0, .L3+4
 109 007e FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL0:
 301:Src/main.c    **** 	
 302:Src/main.c    **** 	/*Configure GPIO pin : PB2 */
 303:Src/main.c    ****   GPIO_InitStruct.Pin = BOOT_1_PIN;
 111              		.loc 1 303 0
 112 0082 4FF40043 		mov	r3, #32768
 113 0086 0593     		str	r3, [sp, #20]
 304:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 114              		.loc 1 304 0
 115 0088 0694     		str	r4, [sp, #24]
 305:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 116              		.loc 1 305 0
 117 008a 0794     		str	r4, [sp, #28]
 306:Src/main.c    ****   HAL_GPIO_Init(BOOT_1_PORT, &GPIO_InitStruct);
 118              		.loc 1 306 0
 119 008c 05A9     		add	r1, sp, #20
 120 008e 0948     		ldr	r0, .L3+8
 121 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 122              	.LVL1:
 307:Src/main.c    **** 
 308:Src/main.c    ****   /*Configure GPIO pin : PE0 */
 309:Src/main.c    ****   GPIO_InitStruct.Pin = LED_1_PIN;
 123              		.loc 1 309 0
 124 0094 0123     		movs	r3, #1
 125 0096 0593     		str	r3, [sp, #20]
 310:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 126              		.loc 1 310 0
 127 0098 0693     		str	r3, [sp, #24]
 311:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 311 0
 129 009a 0794     		str	r4, [sp, #28]
 312:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 130              		.loc 1 312 0
 131 009c 0894     		str	r4, [sp, #32]
 313:Src/main.c    ****   HAL_GPIO_Init(LED_1_PORT, &GPIO_InitStruct);
 132              		.loc 1 313 0
 133 009e 05A9     		add	r1, sp, #20
 134 00a0 0548     		ldr	r0, .L3+12
 135 00a2 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL2:
 314:Src/main.c    **** }
 137              		.loc 1 314 0
 138 00a6 0AB0     		add	sp, sp, #40
 139              	.LCFI2:
 140              		.cfi_def_cfa_offset 8
 141              		@ sp needed
 142 00a8 10BD     		pop	{r4, pc}
 143              	.L4:
ARM GAS  x:\temp2\ccNwGiAj.s 			page 9


 144 00aa 00BF     		.align	2
 145              	.L3:
 146 00ac 00380240 		.word	1073887232
 147 00b0 00000240 		.word	1073872896
 148 00b4 000C0240 		.word	1073875968
 149 00b8 00100240 		.word	1073876992
 150              		.cfi_endproc
 151              	.LFE128:
 153              		.section	.text.write_flash_sector,"ax",%progbits
 154              		.align	1
 155              		.global	write_flash_sector
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu fpv4-sp-d16
 161              	write_flash_sector:
 162              	.LFB129:
 315:Src/main.c    **** 
 316:Src/main.c    **** /* USER CODE BEGIN 4 */
 317:Src/main.c    **** void write_flash_sector(uint32_t currentPage){
 163              		.loc 1 317 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 24
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              	.LVL3:
 168 0000 30B5     		push	{r4, r5, lr}
 169              	.LCFI3:
 170              		.cfi_def_cfa_offset 12
 171              		.cfi_offset 4, -12
 172              		.cfi_offset 5, -8
 173              		.cfi_offset 14, -4
 174 0002 87B0     		sub	sp, sp, #28
 175              	.LCFI4:
 176              		.cfi_def_cfa_offset 40
 177 0004 0446     		mov	r4, r0
 318:Src/main.c    **** 		uint32_t pageAddress = FLASH_BASE + (currentPage * SECTOR_SIZE);
 178              		.loc 1 318 0
 179 0006 00F50035 		add	r5, r0, #131072
 180 000a AD02     		lsls	r5, r5, #10
 181              	.LVL4:
 319:Src/main.c    **** 
 320:Src/main.c    **** 		uint32_t SectorError;
 321:Src/main.c    **** 		
 322:Src/main.c    **** 		HAL_GPIO_WritePin(LED_1_PORT, LED_1_PIN, GPIO_PIN_SET);	
 182              		.loc 1 322 0
 183 000c 0122     		movs	r2, #1
 184 000e 1146     		mov	r1, r2
 185 0010 2048     		ldr	r0, .L11
 186              	.LVL5:
 187 0012 FFF7FEFF 		bl	HAL_GPIO_WritePin
 188              	.LVL6:
 323:Src/main.c    **** 	
 324:Src/main.c    **** 		FLASH_EraseInitTypeDef EraseInit;
 325:Src/main.c    **** 		
 326:Src/main.c    **** 		HAL_FLASH_Unlock();
 189              		.loc 1 326 0
 190 0016 FFF7FEFF 		bl	HAL_FLASH_Unlock
ARM GAS  x:\temp2\ccNwGiAj.s 			page 10


 191              	.LVL7:
 327:Src/main.c    **** 		
 328:Src/main.c    **** 	/* Sector to the erase the flash memory (16, 32, 48 ... kbytes) */
 329:Src/main.c    **** 		if((currentPage == 16)||(currentPage == 32)||(currentPage == 48)||
 192              		.loc 1 329 0
 193 001a 102C     		cmp	r4, #16
 194 001c 08D0     		beq	.L6
 195              		.loc 1 329 0 is_stmt 0 discriminator 1
 196 001e 202C     		cmp	r4, #32
 197 0020 06D0     		beq	.L6
 198              		.loc 1 329 0 discriminator 2
 199 0022 302C     		cmp	r4, #48
 200 0024 04D0     		beq	.L6
 201              		.loc 1 329 0 discriminator 3
 202 0026 402C     		cmp	r4, #64
 203 0028 02D0     		beq	.L6
 330:Src/main.c    **** 			 (currentPage == 64)||(currentPage % 128 == 0)){
 204              		.loc 1 330 0 is_stmt 1
 205 002a 14F07F0F 		tst	r4, #127
 206 002e 0ED1     		bne	.L7
 207              	.L6:
 331:Src/main.c    **** 				 
 332:Src/main.c    **** 			EraseInit.TypeErase			= FLASH_TYPEERASE_SECTORS;
 208              		.loc 1 332 0
 209 0030 0023     		movs	r3, #0
 210 0032 0093     		str	r3, [sp]
 333:Src/main.c    **** 			EraseInit.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 211              		.loc 1 333 0
 212 0034 0223     		movs	r3, #2
 213 0036 0493     		str	r3, [sp, #16]
 334:Src/main.c    **** 			EraseInit.Sector = erase_page++; // Specify sector number. Starts from 0x08004000
 214              		.loc 1 334 0
 215 0038 174A     		ldr	r2, .L11+4
 216 003a 1388     		ldrh	r3, [r2]
 217 003c 591C     		adds	r1, r3, #1
 218 003e 1180     		strh	r1, [r2]	@ movhi
 219 0040 0293     		str	r3, [sp, #8]
 335:Src/main.c    **** 			EraseInit.NbSectors = 1;			 // This is also important!
 220              		.loc 1 335 0
 221 0042 0123     		movs	r3, #1
 222 0044 0393     		str	r3, [sp, #12]
 336:Src/main.c    **** 
 337:Src/main.c    **** 			HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 223              		.loc 1 337 0
 224 0046 05A9     		add	r1, sp, #20
 225 0048 6846     		mov	r0, sp
 226 004a FFF7FEFF 		bl	HAL_FLASHEx_Erase
 227              	.LVL8:
 228              	.L7:
 317:Src/main.c    **** 		uint32_t pageAddress = FLASH_BASE + (currentPage * SECTOR_SIZE);
 229              		.loc 1 317 0 discriminator 1
 230 004e 0024     		movs	r4, #0
 231              	.LVL9:
 232 0050 13E0     		b	.L8
 233              	.LVL10:
 234              	.L9:
 235              	.LBB12:
ARM GAS  x:\temp2\ccNwGiAj.s 			page 11


 338:Src/main.c    **** 		}
 339:Src/main.c    **** 		uint32_t dat;
 340:Src/main.c    **** 		
 341:Src/main.c    **** 		for(int i=0;i<SECTOR_SIZE;i+=4){
 342:Src/main.c    **** 			dat = pageData[i+3];
 236              		.loc 1 342 0 discriminator 3
 237 0052 E21C     		adds	r2, r4, #3
 238 0054 114B     		ldr	r3, .L11+8
 239 0056 995C     		ldrb	r1, [r3, r2]	@ zero_extendqisi2
 240              	.LVL11:
 343:Src/main.c    **** 			dat <<= 8;
 344:Src/main.c    **** 			dat += pageData[i+2];
 241              		.loc 1 344 0 discriminator 3
 242 0058 A21C     		adds	r2, r4, #2
 243 005a 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 244 005c 02EB0121 		add	r1, r2, r1, lsl #8
 245              	.LVL12:
 345:Src/main.c    **** 			dat <<= 8;
 346:Src/main.c    **** 			dat += pageData[i+1];
 246              		.loc 1 346 0 discriminator 3
 247 0060 621C     		adds	r2, r4, #1
 248 0062 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 249 0064 02EB0122 		add	r2, r2, r1, lsl #8
 250              	.LVL13:
 347:Src/main.c    **** 			dat <<= 8;
 348:Src/main.c    **** 			dat += pageData[i];
 251              		.loc 1 348 0 discriminator 3
 252 0068 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 253              	.LVL14:
 349:Src/main.c    **** 			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAddress + i, dat);
 254              		.loc 1 349 0 discriminator 3
 255 006a 03EB0222 		add	r2, r3, r2, lsl #8
 256              	.LVL15:
 257 006e 0023     		movs	r3, #0
 258 0070 6119     		adds	r1, r4, r5
 259 0072 0220     		movs	r0, #2
 260 0074 FFF7FEFF 		bl	HAL_FLASH_Program
 261              	.LVL16:
 341:Src/main.c    **** 			dat = pageData[i+3];
 262              		.loc 1 341 0 discriminator 3
 263 0078 0434     		adds	r4, r4, #4
 264              	.LVL17:
 265              	.L8:
 341:Src/main.c    **** 			dat = pageData[i+3];
 266              		.loc 1 341 0 is_stmt 0 discriminator 1
 267 007a B4F5806F 		cmp	r4, #1024
 268 007e E8DB     		blt	.L9
 269              	.LBE12:
 350:Src/main.c    **** 		}
 351:Src/main.c    **** 		HAL_GPIO_WritePin(LED_1_PORT, LED_1_PIN,GPIO_PIN_RESET);	
 270              		.loc 1 351 0 is_stmt 1
 271 0080 0022     		movs	r2, #0
 272 0082 0121     		movs	r1, #1
 273 0084 0348     		ldr	r0, .L11
 274 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 275              	.LVL18:
 352:Src/main.c    **** 		HAL_FLASH_Lock();
ARM GAS  x:\temp2\ccNwGiAj.s 			page 12


 276              		.loc 1 352 0
 277 008a FFF7FEFF 		bl	HAL_FLASH_Lock
 278              	.LVL19:
 353:Src/main.c    **** }
 279              		.loc 1 353 0
 280 008e 07B0     		add	sp, sp, #28
 281              	.LCFI5:
 282              		.cfi_def_cfa_offset 12
 283              		@ sp needed
 284 0090 30BD     		pop	{r4, r5, pc}
 285              	.LVL20:
 286              	.L12:
 287 0092 00BF     		.align	2
 288              	.L11:
 289 0094 00100240 		.word	1073876992
 290 0098 00000000 		.word	.LANCHOR0
 291 009c 00000000 		.word	.LANCHOR1
 292              		.cfi_endproc
 293              	.LFE129:
 295              		.section	.text._Error_Handler,"ax",%progbits
 296              		.align	1
 297              		.global	_Error_Handler
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu fpv4-sp-d16
 303              	_Error_Handler:
 304              	.LFB130:
 354:Src/main.c    **** /* USER CODE END 4 */
 355:Src/main.c    **** 
 356:Src/main.c    **** /**
 357:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 358:Src/main.c    ****   * @param  file: The file name as string.
 359:Src/main.c    ****   * @param  line: The line in file as a number.
 360:Src/main.c    ****   * @retval None
 361:Src/main.c    ****   */
 362:Src/main.c    **** void _Error_Handler(char *file, int line)
 363:Src/main.c    **** {
 305              		.loc 1 363 0
 306              		.cfi_startproc
 307              		@ Volatile: function does not return.
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311              	.LVL21:
 312              	.L14:
 313 0000 FEE7     		b	.L14
 314              		.cfi_endproc
 315              	.LFE130:
 317              		.section	.text.SystemClock_Config,"ax",%progbits
 318              		.align	1
 319              		.global	SystemClock_Config
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu fpv4-sp-d16
 325              	SystemClock_Config:
ARM GAS  x:\temp2\ccNwGiAj.s 			page 13


 326              	.LFB127:
 222:Src/main.c    **** 
 327              		.loc 1 222 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 80
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 222:Src/main.c    **** 
 331              		.loc 1 222 0
 332 0000 00B5     		push	{lr}
 333              	.LCFI6:
 334              		.cfi_def_cfa_offset 4
 335              		.cfi_offset 14, -4
 336 0002 95B0     		sub	sp, sp, #84
 337              	.LCFI7:
 338              		.cfi_def_cfa_offset 88
 339              	.LBB13:
 229:Src/main.c    **** 
 340              		.loc 1 229 0
 341 0004 0021     		movs	r1, #0
 342 0006 0191     		str	r1, [sp, #4]
 343 0008 2B4B     		ldr	r3, .L21
 344 000a 1A6C     		ldr	r2, [r3, #64]
 345 000c 42F08052 		orr	r2, r2, #268435456
 346 0010 1A64     		str	r2, [r3, #64]
 347 0012 1B6C     		ldr	r3, [r3, #64]
 348 0014 03F08053 		and	r3, r3, #268435456
 349 0018 0193     		str	r3, [sp, #4]
 350 001a 019B     		ldr	r3, [sp, #4]
 351              	.LBE13:
 352              	.LBB14:
 231:Src/main.c    **** 
 353              		.loc 1 231 0
 354 001c 0291     		str	r1, [sp, #8]
 355 001e 274B     		ldr	r3, .L21+4
 356 0020 1A68     		ldr	r2, [r3]
 357 0022 42F48042 		orr	r2, r2, #16384
 358 0026 1A60     		str	r2, [r3]
 359 0028 1B68     		ldr	r3, [r3]
 360 002a 03F48043 		and	r3, r3, #16384
 361 002e 0293     		str	r3, [sp, #8]
 362 0030 029B     		ldr	r3, [sp, #8]
 363              	.LBE14:
 235:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 364              		.loc 1 235 0
 365 0032 0123     		movs	r3, #1
 366 0034 0893     		str	r3, [sp, #32]
 236:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 367              		.loc 1 236 0
 368 0036 4FF48033 		mov	r3, #65536
 369 003a 0993     		str	r3, [sp, #36]
 237:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 370              		.loc 1 237 0
 371 003c 0223     		movs	r3, #2
 372 003e 0E93     		str	r3, [sp, #56]
 238:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM =  4;
 373              		.loc 1 238 0
 374 0040 4FF48002 		mov	r2, #4194304
ARM GAS  x:\temp2\ccNwGiAj.s 			page 14


 375 0044 0F92     		str	r2, [sp, #60]
 239:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN =168;
 376              		.loc 1 239 0
 377 0046 0422     		movs	r2, #4
 378 0048 1092     		str	r2, [sp, #64]
 240:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 379              		.loc 1 240 0
 380 004a A822     		movs	r2, #168
 381 004c 1192     		str	r2, [sp, #68]
 241:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ =  7;
 382              		.loc 1 241 0
 383 004e 1293     		str	r3, [sp, #72]
 242:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 384              		.loc 1 242 0
 385 0050 0723     		movs	r3, #7
 386 0052 1393     		str	r3, [sp, #76]
 243:Src/main.c    ****   {
 387              		.loc 1 243 0
 388 0054 08A8     		add	r0, sp, #32
 389 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 390              	.LVL22:
 391 005a 20BB     		cbnz	r0, .L19
 250:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 392              		.loc 1 250 0
 393 005c 0F23     		movs	r3, #15
 394 005e 0393     		str	r3, [sp, #12]
 252:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 395              		.loc 1 252 0
 396 0060 0223     		movs	r3, #2
 397 0062 0493     		str	r3, [sp, #16]
 253:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 398              		.loc 1 253 0
 399 0064 0023     		movs	r3, #0
 400 0066 0593     		str	r3, [sp, #20]
 254:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 401              		.loc 1 254 0
 402 0068 4FF4A053 		mov	r3, #5120
 403 006c 0693     		str	r3, [sp, #24]
 255:Src/main.c    **** 
 404              		.loc 1 255 0
 405 006e 4FF48053 		mov	r3, #4096
 406 0072 0793     		str	r3, [sp, #28]
 257:Src/main.c    ****   {
 407              		.loc 1 257 0
 408 0074 0521     		movs	r1, #5
 409 0076 03A8     		add	r0, sp, #12
 410 0078 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 411              	.LVL23:
 412 007c B8B9     		cbnz	r0, .L20
 264:Src/main.c    **** 
 413              		.loc 1 264 0
 414 007e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 415              	.LVL24:
 416 0082 0F4B     		ldr	r3, .L21+8
 417 0084 A3FB0030 		umull	r3, r0, r3, r0
 418 0088 8009     		lsrs	r0, r0, #6
 419 008a FFF7FEFF 		bl	HAL_SYSTICK_Config
ARM GAS  x:\temp2\ccNwGiAj.s 			page 15


 420              	.LVL25:
 268:Src/main.c    **** 
 421              		.loc 1 268 0
 422 008e 0420     		movs	r0, #4
 423 0090 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 424              	.LVL26:
 271:Src/main.c    **** }
 425              		.loc 1 271 0
 426 0094 0022     		movs	r2, #0
 427 0096 1146     		mov	r1, r2
 428 0098 4FF0FF30 		mov	r0, #-1
 429 009c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 430              	.LVL27:
 272:Src/main.c    **** 
 431              		.loc 1 272 0
 432 00a0 15B0     		add	sp, sp, #84
 433              	.LCFI8:
 434              		.cfi_remember_state
 435              		.cfi_def_cfa_offset 4
 436              		@ sp needed
 437 00a2 5DF804FB 		ldr	pc, [sp], #4
 438              	.L19:
 439              	.LCFI9:
 440              		.cfi_restore_state
 245:Src/main.c    ****   }
 441              		.loc 1 245 0
 442 00a6 F521     		movs	r1, #245
 443 00a8 0648     		ldr	r0, .L21+12
 444 00aa FFF7FEFF 		bl	_Error_Handler
 445              	.LVL28:
 446              	.L20:
 259:Src/main.c    ****   }
 447              		.loc 1 259 0
 448 00ae 40F20311 		movw	r1, #259
 449 00b2 0448     		ldr	r0, .L21+12
 450 00b4 FFF7FEFF 		bl	_Error_Handler
 451              	.LVL29:
 452              	.L22:
 453              		.align	2
 454              	.L21:
 455 00b8 00380240 		.word	1073887232
 456 00bc 00700040 		.word	1073770496
 457 00c0 D34D6210 		.word	274877907
 458 00c4 00000000 		.word	.LC0
 459              		.cfi_endproc
 460              	.LFE127:
 462              		.section	.text.main,"ax",%progbits
 463              		.align	1
 464              		.global	main
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv4-sp-d16
 470              	main:
 471              	.LFB126:
 116:Src/main.c    ****   /* USER CODE BEGIN 1 */
 472              		.loc 1 116 0
ARM GAS  x:\temp2\ccNwGiAj.s 			page 16


 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 8
 475              		@ frame_needed = 1, uses_anonymous_args = 0
 476 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 477              	.LCFI10:
 478              		.cfi_def_cfa_offset 20
 479              		.cfi_offset 4, -20
 480              		.cfi_offset 5, -16
 481              		.cfi_offset 6, -12
 482              		.cfi_offset 7, -8
 483              		.cfi_offset 14, -4
 484 0002 83B0     		sub	sp, sp, #12
 485              	.LCFI11:
 486              		.cfi_def_cfa_offset 32
 487 0004 00AF     		add	r7, sp, #0
 488              	.LCFI12:
 489              		.cfi_def_cfa_register 7
 124:Src/main.c    **** 
 490              		.loc 1 124 0
 491 0006 FFF7FEFF 		bl	HAL_Init
 492              	.LVL30:
 131:Src/main.c    **** 
 493              		.loc 1 131 0
 494 000a FFF7FEFF 		bl	SystemClock_Config
 495              	.LVL31:
 136:Src/main.c    **** 	
 496              		.loc 1 136 0
 497 000e FFF7FEFF 		bl	MX_GPIO_Init
 498              	.LVL32:
 499              	.LBB15:
 138:Src/main.c    **** 	HAL_PWR_EnableBkUpAccess();
 500              		.loc 1 138 0
 501 0012 0025     		movs	r5, #0
 502 0014 3D60     		str	r5, [r7]
 503 0016 454C     		ldr	r4, .L35
 504 0018 236C     		ldr	r3, [r4, #64]
 505 001a 43F08053 		orr	r3, r3, #268435456
 506 001e 2364     		str	r3, [r4, #64]
 507 0020 236C     		ldr	r3, [r4, #64]
 508 0022 03F08053 		and	r3, r3, #268435456
 509 0026 3B60     		str	r3, [r7]
 510 0028 3B68     		ldr	r3, [r7]
 511              	.LBE15:
 139:Src/main.c    **** 	__BKPSRAM_CLK_ENABLE();
 512              		.loc 1 139 0
 513 002a FFF7FEFF 		bl	HAL_PWR_EnableBkUpAccess
 514              	.LVL33:
 515              	.LBB16:
 140:Src/main.c    **** 	magic_val = *(__IO uint32_t *)(BKPSRAM_BASE); // Read the magic number 0x0x424C an Backup SRAM add
 516              		.loc 1 140 0
 517 002e 7D60     		str	r5, [r7, #4]
 518 0030 236B     		ldr	r3, [r4, #48]
 519 0032 43F48023 		orr	r3, r3, #262144
 520 0036 2363     		str	r3, [r4, #48]
 521 0038 236B     		ldr	r3, [r4, #48]
 522 003a 03F48023 		and	r3, r3, #262144
 523 003e 7B60     		str	r3, [r7, #4]
ARM GAS  x:\temp2\ccNwGiAj.s 			page 17


 524 0040 7B68     		ldr	r3, [r7, #4]
 525              	.LBE16:
 141:Src/main.c    **** 	
 526              		.loc 1 141 0
 527 0042 3B4B     		ldr	r3, .L35+4
 528 0044 1B68     		ldr	r3, [r3]
 529 0046 3B4A     		ldr	r2, .L35+8
 530 0048 1360     		str	r3, [r2]
 144:Src/main.c    **** 			
 531              		.loc 1 144 0
 532 004a 44F24C22 		movw	r2, #16972
 533 004e 9342     		cmp	r3, r2
 534 0050 0CD0     		beq	.L24
 144:Src/main.c    **** 			
 535              		.loc 1 144 0 is_stmt 0 discriminator 1
 536 0052 4FF40041 		mov	r1, #32768
 537 0056 3848     		ldr	r0, .L35+12
 538 0058 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 539              	.LVL34:
 540 005c 30B1     		cbz	r0, .L24
 541              	.LBB17:
 150:Src/main.c    **** 		Jump_To_Application = (pFunction) JumpAddress;
 542              		.loc 1 150 0 is_stmt 1
 543 005e 374B     		ldr	r3, .L35+16
 544 0060 1B68     		ldr	r3, [r3]
 545              	.LVL35:
 152:Src/main.c    **** 		Jump_To_Application(); 
 546              		.loc 1 152 0
 547 0062 374A     		ldr	r2, .L35+20
 548 0064 1268     		ldr	r2, [r2]
 549              	.LVL36:
 550              	.LBB18:
 551              	.LBB19:
 552              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARM GAS  x:\temp2\ccNwGiAj.s 			page 18


  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
ARM GAS  x:\temp2\ccNwGiAj.s 			page 19


  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  x:\temp2\ccNwGiAj.s 			page 20


 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 553              		.loc 2 190 0
 554              		.syntax unified
 555              	@ 190 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 556 0066 82F30888 		MSR msp, r2
ARM GAS  x:\temp2\ccNwGiAj.s 			page 21


 557              	
 558              	@ 0 "" 2
 559              	.LVL37:
 560              		.thumb
 561              		.syntax unified
 562              	.LBE19:
 563              	.LBE18:
 153:Src/main.c    **** 	}
 564              		.loc 1 153 0
 565 006a 9847     		blx	r3
 566              	.LVL38:
 567              	.L24:
 568              	.LBE17:
 156:Src/main.c    **** 	
 569              		.loc 1 156 0
 570 006c 304B     		ldr	r3, .L35+4
 571 006e 0022     		movs	r2, #0
 572 0070 1A60     		str	r2, [r3]
 162:Src/main.c    **** 
 573              		.loc 1 162 0
 574 0072 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 575              	.LVL39:
 576 0076 08E0     		b	.L27
 577              	.L29:
 180:Src/main.c    **** 						currentPageOffset = 0;
 578              		.loc 1 180 0
 579 0078 324B     		ldr	r3, .L35+24
 580 007a 1022     		movs	r2, #16
 581 007c 1A60     		str	r2, [r3]
 181:Src/main.c    **** 						erase_page = 1;
 582              		.loc 1 181 0
 583 007e 324B     		ldr	r3, .L35+28
 584 0080 0022     		movs	r2, #0
 585 0082 1A80     		strh	r2, [r3]	@ movhi
 182:Src/main.c    **** 						//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_0);	
 586              		.loc 1 182 0
 587 0084 314B     		ldr	r3, .L35+32
 588 0086 0122     		movs	r2, #1
 589 0088 1A80     		strh	r2, [r3]	@ movhi
 590              	.L27:
 174:Src/main.c    **** 			new_data_is_received = 0;
 591              		.loc 1 174 0
 592 008a 314B     		ldr	r3, .L35+36
 593 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 594 008e 012B     		cmp	r3, #1
 595 0090 FBD1     		bne	.L27
 175:Src/main.c    **** 			if(memcmp(USB_RX_Buffer, CMD_SIGNATURE, sizeof(CMD_SIGNATURE)) == 0) {
 596              		.loc 1 175 0
 597 0092 2F4B     		ldr	r3, .L35+36
 598 0094 0022     		movs	r2, #0
 599 0096 1A70     		strb	r2, [r3]
 176:Src/main.c    **** 				
 600              		.loc 1 176 0
 601 0098 0722     		movs	r2, #7
 602 009a 2E49     		ldr	r1, .L35+40
 603 009c 2E48     		ldr	r0, .L35+44
 604 009e FFF7FEFF 		bl	memcmp
ARM GAS  x:\temp2\ccNwGiAj.s 			page 22


 605              	.LVL40:
 606 00a2 A0B9     		cbnz	r0, .L28
 178:Src/main.c    **** 					case 0x00:	//------------ Reset pages
 607              		.loc 1 178 0
 608 00a4 2C4B     		ldr	r3, .L35+44
 609 00a6 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 610 00a8 002B     		cmp	r3, #0
 611 00aa E5D0     		beq	.L29
 612 00ac 012B     		cmp	r3, #1
 613 00ae ECD1     		bne	.L27
 187:Src/main.c    **** 							write_flash_sector(current_Page);
 614              		.loc 1 187 0
 615 00b0 254B     		ldr	r3, .L35+28
 616 00b2 1B88     		ldrh	r3, [r3]
 617 00b4 9BB2     		uxth	r3, r3
 618 00b6 2BB9     		cbnz	r3, .L34
 619              	.L31:
 190:Src/main.c    **** 						HAL_NVIC_SystemReset();
 620              		.loc 1 190 0
 621 00b8 6420     		movs	r0, #100
 622 00ba FFF7FEFF 		bl	HAL_Delay
 623              	.LVL41:
 191:Src/main.c    **** 					break;
 624              		.loc 1 191 0
 625 00be FFF7FEFF 		bl	HAL_NVIC_SystemReset
 626              	.LVL42:
 192:Src/main.c    **** 				}				
 627              		.loc 1 192 0
 628 00c2 E2E7     		b	.L27
 629              	.L34:
 188:Src/main.c    **** 						}
 630              		.loc 1 188 0
 631 00c4 1F4B     		ldr	r3, .L35+24
 632 00c6 1868     		ldr	r0, [r3]
 633 00c8 FFF7FEFF 		bl	write_flash_sector
 634              	.LVL43:
 635 00cc F4E7     		b	.L31
 636              	.L28:
 195:Src/main.c    **** 				currentPageOffset += HID_RX_SIZE;
 637              		.loc 1 195 0
 638 00ce 1E4B     		ldr	r3, .L35+28
 639 00d0 1988     		ldrh	r1, [r3]
 640 00d2 214B     		ldr	r3, .L35+44
 641 00d4 214A     		ldr	r2, .L35+48
 642 00d6 0A44     		add	r2, r2, r1
 643 00d8 03F14001 		add	r1, r3, #64
 644              	.L32:
 645 00dc 1E68     		ldr	r6, [r3]	@ unaligned
 646 00de 5D68     		ldr	r5, [r3, #4]	@ unaligned
 647 00e0 9C68     		ldr	r4, [r3, #8]	@ unaligned
 648 00e2 D868     		ldr	r0, [r3, #12]	@ unaligned
 649 00e4 1660     		str	r6, [r2]	@ unaligned
 650 00e6 5560     		str	r5, [r2, #4]	@ unaligned
 651 00e8 9460     		str	r4, [r2, #8]	@ unaligned
 652 00ea D060     		str	r0, [r2, #12]	@ unaligned
 653 00ec 1033     		adds	r3, r3, #16
 654 00ee 1032     		adds	r2, r2, #16
ARM GAS  x:\temp2\ccNwGiAj.s 			page 23


 655 00f0 8B42     		cmp	r3, r1
 656 00f2 F3D1     		bne	.L32
 196:Src/main.c    **** 				
 657              		.loc 1 196 0
 658 00f4 144A     		ldr	r2, .L35+28
 659 00f6 1388     		ldrh	r3, [r2]
 660 00f8 4033     		adds	r3, r3, #64
 661 00fa 9BB2     		uxth	r3, r3
 662 00fc 1380     		strh	r3, [r2]	@ movhi
 198:Src/main.c    **** 					write_flash_sector(current_Page);
 663              		.loc 1 198 0
 664 00fe 1388     		ldrh	r3, [r2]
 665 0100 9BB2     		uxth	r3, r3
 666 0102 B3F5806F 		cmp	r3, #1024
 667 0106 C0D1     		bne	.L27
 199:Src/main.c    **** 					current_Page++;
 668              		.loc 1 199 0
 669 0108 0E4C     		ldr	r4, .L35+24
 670 010a 2068     		ldr	r0, [r4]
 671 010c FFF7FEFF 		bl	write_flash_sector
 672              	.LVL44:
 200:Src/main.c    **** 					currentPageOffset = 0;
 673              		.loc 1 200 0
 674 0110 2368     		ldr	r3, [r4]
 675 0112 0133     		adds	r3, r3, #1
 676 0114 2360     		str	r3, [r4]
 201:Src/main.c    **** 					CMD_DATA_RECEIVED[7] = 0x02;
 677              		.loc 1 201 0
 678 0116 0C4B     		ldr	r3, .L35+28
 679 0118 0022     		movs	r2, #0
 680 011a 1A80     		strh	r2, [r3]	@ movhi
 202:Src/main.c    **** 					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, CMD_DATA_RECEIVED, 8);
 681              		.loc 1 202 0
 682 011c 1049     		ldr	r1, .L35+52
 683 011e 0223     		movs	r3, #2
 684 0120 CB71     		strb	r3, [r1, #7]
 203:Src/main.c    **** 				}
 685              		.loc 1 203 0
 686 0122 0822     		movs	r2, #8
 687 0124 0F48     		ldr	r0, .L35+56
 688 0126 FFF7FEFF 		bl	USBD_CUSTOM_HID_SendReport
 689              	.LVL45:
 690 012a AEE7     		b	.L27
 691              	.L36:
 692              		.align	2
 693              	.L35:
 694 012c 00380240 		.word	1073887232
 695 0130 00400240 		.word	1073889280
 696 0134 00000000 		.word	magic_val
 697 0138 000C0240 		.word	1073875968
 698 013c 04400008 		.word	134234116
 699 0140 00400008 		.word	134234112
 700 0144 00000000 		.word	.LANCHOR4
 701 0148 00000000 		.word	.LANCHOR5
 702 014c 00000000 		.word	.LANCHOR0
 703 0150 00000000 		.word	.LANCHOR2
 704 0154 00000000 		.word	.LANCHOR3
ARM GAS  x:\temp2\ccNwGiAj.s 			page 24


 705 0158 00000000 		.word	USB_RX_Buffer
 706 015c 00000000 		.word	.LANCHOR1
 707 0160 00000000 		.word	.LANCHOR6
 708 0164 00000000 		.word	hUsbDeviceFS
 709              		.cfi_endproc
 710              	.LFE126:
 712              		.global	erase_page
 713              		.comm	magic_val,4,4
 714              		.global	new_data_is_received
 715              		.comm	USB_TX_Buffer,8,4
 716              		.comm	USB_RX_Buffer,64,4
 717              		.section	.bss.currentPageOffset.9362,"aw",%nobits
 718              		.align	1
 719              		.set	.LANCHOR5,. + 0
 722              	currentPageOffset.9362:
 723 0000 0000     		.space	2
 724              		.section	.bss.new_data_is_received,"aw",%nobits
 725              		.set	.LANCHOR2,. + 0
 728              	new_data_is_received:
 729 0000 00       		.space	1
 730              		.section	.bss.pageData,"aw",%nobits
 731              		.align	2
 732              		.set	.LANCHOR1,. + 0
 735              	pageData:
 736 0000 00000000 		.space	1024
 736      00000000 
 736      00000000 
 736      00000000 
 736      00000000 
 737              		.section	.data.CMD_DATA_RECEIVED,"aw",%progbits
 738              		.align	2
 739              		.set	.LANCHOR6,. + 0
 742              	CMD_DATA_RECEIVED:
 743 0000 42       		.byte	66
 744 0001 54       		.byte	84
 745 0002 4C       		.byte	76
 746 0003 44       		.byte	68
 747 0004 43       		.byte	67
 748 0005 4D       		.byte	77
 749 0006 44       		.byte	68
 750 0007 02       		.byte	2
 751              		.section	.data.CMD_SIGNATURE,"aw",%progbits
 752              		.align	2
 753              		.set	.LANCHOR3,. + 0
 756              	CMD_SIGNATURE:
 757 0000 42       		.byte	66
 758 0001 54       		.byte	84
 759 0002 4C       		.byte	76
 760 0003 44       		.byte	68
 761 0004 43       		.byte	67
 762 0005 4D       		.byte	77
 763 0006 44       		.byte	68
 764              		.section	.data.current_Page.9361,"aw",%progbits
 765              		.align	2
 766              		.set	.LANCHOR4,. + 0
 769              	current_Page.9361:
 770 0000 10000000 		.word	16
ARM GAS  x:\temp2\ccNwGiAj.s 			page 25


 771              		.section	.data.erase_page,"aw",%progbits
 772              		.align	1
 773              		.set	.LANCHOR0,. + 0
 776              	erase_page:
 777 0000 0100     		.short	1
 778              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 779              		.align	2
 780              	.LC0:
 781 0000 5372632F 		.ascii	"Src/main.c\000"
 781      6D61696E 
 781      2E6300
 782              		.text
 783              	.Letext0:
 784              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 785              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 786              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 787              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 788              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 789              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 790              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 791              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 792              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 793              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 794              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 795              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 796              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 797              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_flash_ex.h"
 798              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 799              		.file 18 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 800              		.file 19 "Inc/usb_device.h"
 801              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_flash.h"
 802              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 803              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 804              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pwr.h"
 805              		.file 24 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
ARM GAS  x:\temp2\ccNwGiAj.s 			page 26


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
 x:\temp2\ccNwGiAj.s:18     .text.MX_GPIO_Init:00000000 $t
 x:\temp2\ccNwGiAj.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
 x:\temp2\ccNwGiAj.s:146    .text.MX_GPIO_Init:000000ac $d
 x:\temp2\ccNwGiAj.s:154    .text.write_flash_sector:00000000 $t
 x:\temp2\ccNwGiAj.s:161    .text.write_flash_sector:00000000 write_flash_sector
 x:\temp2\ccNwGiAj.s:289    .text.write_flash_sector:00000094 $d
 x:\temp2\ccNwGiAj.s:296    .text._Error_Handler:00000000 $t
 x:\temp2\ccNwGiAj.s:303    .text._Error_Handler:00000000 _Error_Handler
 x:\temp2\ccNwGiAj.s:318    .text.SystemClock_Config:00000000 $t
 x:\temp2\ccNwGiAj.s:325    .text.SystemClock_Config:00000000 SystemClock_Config
 x:\temp2\ccNwGiAj.s:455    .text.SystemClock_Config:000000b8 $d
 x:\temp2\ccNwGiAj.s:463    .text.main:00000000 $t
 x:\temp2\ccNwGiAj.s:470    .text.main:00000000 main
 x:\temp2\ccNwGiAj.s:694    .text.main:0000012c $d
                            *COM*:00000004 magic_val
                            *COM*:00000040 USB_RX_Buffer
 x:\temp2\ccNwGiAj.s:776    .data.erase_page:00000000 erase_page
 x:\temp2\ccNwGiAj.s:728    .bss.new_data_is_received:00000000 new_data_is_received
                            *COM*:00000008 USB_TX_Buffer
 x:\temp2\ccNwGiAj.s:718    .bss.currentPageOffset.9362:00000000 $d
 x:\temp2\ccNwGiAj.s:722    .bss.currentPageOffset.9362:00000000 currentPageOffset.9362
 x:\temp2\ccNwGiAj.s:729    .bss.new_data_is_received:00000000 $d
 x:\temp2\ccNwGiAj.s:731    .bss.pageData:00000000 $d
 x:\temp2\ccNwGiAj.s:735    .bss.pageData:00000000 pageData
 x:\temp2\ccNwGiAj.s:738    .data.CMD_DATA_RECEIVED:00000000 $d
 x:\temp2\ccNwGiAj.s:742    .data.CMD_DATA_RECEIVED:00000000 CMD_DATA_RECEIVED
 x:\temp2\ccNwGiAj.s:752    .data.CMD_SIGNATURE:00000000 $d
 x:\temp2\ccNwGiAj.s:756    .data.CMD_SIGNATURE:00000000 CMD_SIGNATURE
 x:\temp2\ccNwGiAj.s:765    .data.current_Page.9361:00000000 $d
 x:\temp2\ccNwGiAj.s:769    .data.current_Page.9361:00000000 current_Page.9361
 x:\temp2\ccNwGiAj.s:772    .data.erase_page:00000000 $d
 x:\temp2\ccNwGiAj.s:779    .rodata.SystemClock_Config.str1.4:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_GPIO_WritePin
HAL_FLASH_Unlock
HAL_FLASHEx_Erase
HAL_FLASH_Program
HAL_FLASH_Lock
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
HAL_PWR_EnableBkUpAccess
HAL_GPIO_ReadPin
MX_USB_DEVICE_Init
memcmp
HAL_Delay
HAL_NVIC_SystemReset
USBD_CUSTOM_HID_SendReport
hUsbDeviceFS
ARM GAS  x:\temp2\ccNwGiAj.s 			page 27


